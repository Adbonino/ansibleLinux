---
- name: Procesar lista de IPs
  hosts: localhost
  gather_facts: no
  vars:
    output_file: "/tmp/salida.txt"
    ips_propias:
          - 51.34.1.1
          - 51.34.2.2
          - 51.35.2.2

  tasks:
        
    - name: Separar la lista de IPs en una lista de Python
      ansible.builtin.set_fact:
        ips: "{{ ip_list.split(',') | map('trim') }}"
        ips_validas: []
        ips_no_validas: []
        ips_publicas: []
        ips_privadas: []
        ips_blocks: []
        ips_owner: []
        
    #- name: Mostrar cada IP de la lista
    #  debug:
    #    msg: "IP: {{ item }}"
    #  loop: "{{ ips }}"

    - name: verificar formatos de las ips
      vars:
        is_formateada: "{{ item is ansible.utils.ipv4 }}"
      ansible.builtin.set_fact:
        ips_validas: "{{ ips_validas + [item] }}"
      when: is_formateada
      loop: "{{ ips }}"
      loop_control:
        loop_var: item

    - name: filtrar ip no ips_validas
      set_fact:
        ips_no_validas: "{{ ips | difference(ips_validas) }}"

    - name: mostrat ips ips_validas
      debug:
        var: ips_validas
    
    - name: mostrat ips ips_no_validas
      debug:
        var: ips_no_validas

    - name: verificar si la ip es publica
      vars:
        is_publica: "{{ item is ansible.utils.public }}"
      ansible.builtin.set_fact:
        ips_publicas: "{{ ips_publicas + [item] }}"
      when: is_publica
      loop: "{{ ips_validas }}"
      loop_control:
        loop_var: item

    - name: filtrar ip privadas
      set_fact:
        ips_privadas: "{{ ips_validas | difference(ips_publicas) }}"

    - name: mostrat ips publicas
      debug:
        var: ips_publicas
    
    - name: mostrat ips privadas
      debug:
        var: ips_privadas

    - name: verificar si la ip esta en la lista de ip propias
      vars:
        is_propia: "{{ item in ips_propias }}"
      ansible.builtin.set_fact:
        ips_blocks: "{{ ips_blocks + [item] }}"
      when: not is_propia
      loop: "{{ ips_publicas }}"
      loop_control:
        loop_var: item

    - name: filtrar ip publicas
      set_fact:
        ips_owner: "{{ ips_publicas | difference(ips_blocks) }}"
    
    - name: mostrar ips propias
      debug:
        var: ips_owner

    # Armar reporte

    - name: crear archivo
      lineinfile:
        line: "Salia del comando Block IPs"
        path: /tmp/archivo.txt
        create: yes    
   
    - name: agregar linea al archivo si la Ip es falsa
      lineinfile:
       line: "{{ item }}: no es una ip valida, por lo que se descarta de la lista de ips ingresadas."
       path: /tmp/archivo.txt
      loop: "{{ ips_no_validas }}"
      loop_control:
        loop_var: item
    
    - name: agregar linea al archivo si la Ip es privada
      lineinfile:
       line: "{{ item }}: es una ip privada y es descartada de la lista de ips ingresadas."
       path: /tmp/archivo.txt
      loop: "{{ ips_privadas}}"
      loop_control:
        loop_var: item

    - name: Lista de IPs publicas
      lineinfile:
       line: "Lista de ip publicas a bloquear"
       path: /tmp/archivo.txt
      loop: "{{ ips_publicas}}"
      loop_control:
        loop_var: item

    - name: agregar linea al archivo si la Ip publica es propia
      lineinfile:
       line: "{{ item }}: es una ip propia"
       path: /tmp/archivo.txt
      loop: "{{ ips_owner }}"
      loop_control:
        loop_var: item

    - name: agregar linea al archivo si la Ip es publica
      lineinfile:
       line: "{{ item }}"
       path: /tmp/archivo.txt
      loop: "{{ ips_blocks}}"
      loop_control:
        loop_var: item

    - name: Leer contenido del archivo
      slurp:
        path: /tmp/archivo.txt
      register: archivo_contenido

    - name: Mostrar contenido del archivo
      debug:
        msg: "Contenido del archivo: {{ archivo_contenido.content | b64decode }}"  
  