---
- name: Procesar lista de IPs
  hosts: all
  connection: httpapi
  gather_facts: no
  vars:
    output_file: "/tmp/salida.txt"
  vars_files:
    - variables.yml

  tasks:
        
    - name: Separar la lista de IPs ingresadas por el operador en una lista de Python
      ansible.builtin.set_fact:
        ips: "{{ ip_list.split(',') | map('trim') }}"
        ips_validas: []       # se van a guardar las Ips bien formadas
        ips_no_validas: []    # listado de Ips mal formadas
        ips_publicas: []      # listado de IPs publicas 
        ips_privadas: []      # listado de IPs privadas
        ips_owner: []         # para guardar las IPs ingresadas que tambien estan en el listado de ip_propias_BCP
        ips_blocks: []        # listado de IPs que se enviaran al proceso de bloqueo
      delegate_to: localhost

    - name: Mostrar listado de las IPs ingresadas por el operador
      debug:
        msg: "IP: {{ item }}"
      loop: "{{ ips }}"

    - name: verificar formatos de las ips ips validas
      vars:
        is_formateada: "{{ item is ansible.utils.ipv4 }}"
      ansible.builtin.set_fact:
        ips_validas: "{{ ips_validas + [item] }}"
      when: is_formateada
      loop: "{{ ips }}"
      loop_control:
        loop_var: item
      delegate_to: localhost

    - name: filtrar ip no ips_validas
      set_fact:
        ips_no_validas: "{{ ips | difference(ips_validas) }}"
      delegate_to: localhost

    - name: mostrar ips ips_validas
      debug:
        var: ips_validas
      delegate_to: localhost
    
    - name: mostrat ips ips_no_validas
      debug:
        var: ips_no_validas
      delegate_to: localhost

    - name: verificar si la ip es publica
      vars:
        is_publica: "{{ item is ansible.utils.public }}"
      ansible.builtin.set_fact:
        ips_publicas: "{{ ips_publicas + [item] }}"
      when: is_publica
      loop: "{{ ips_validas }}"
      loop_control:
        loop_var: item
      delegate_to: localhost

    - name: filtrar ip privadas
      set_fact:
        ips_privadas: "{{ ips_validas | difference(ips_publicas) }}"
      delegate_to: localhost

    - name: mostrar ips publicas
      debug:
        var: ips_publicas
      delegate_to: localhost
    
    - name: mostrat ips privadas
      debug:
        var: ips_privadas
      delegate_to: localhost

    
    - name: verificar si la ip esta en la lista de ip propias
      vars:
        is_propia: "{{ item in ip_propias_bcp }}"
      ansible.builtin.set_fact:
        ips_blocks: "{{ ips_blocks + [item] }}"
      when: not is_propia
      loop: "{{ ips_publicas }}"
      loop_control:
        loop_var: item
      delegate_to: localhost
 
    - name: filtrar ip propias
      set_fact:
        ips_owner: "{{ ips_publicas | difference(ips_blocks) }}"
      delegate_to: localhost
   
    - name: mostrar ips propias
      debug:
        var: ips_owner
      delegate_to: localhost

    - name: crear archivo
      lineinfile:
        line: "Salida del comando Block IPs"
        path: /tmp/archivo.txt
        create: yes
      delegate_to: localhost    

    # Armado de Archivo para enciar por correo electronico   
    - name: agregar linea al archivo si la Ip es falsa
      lineinfile:
       line: "{{ item }}: no es una ip valida, por lo que se descarta de la lista de ips ingresadas."
       path: /tmp/archivo.txt
      loop: "{{ ips_no_validas }}"
      loop_control:
        loop_var: item
      delegate_to: localhost
    
    - name: agregar linea al archivo si la Ip es propia
      lineinfile:
       line: "{{ item }}: es una ip propia del BCP y es descartada de la lista de ips ingresadas."
       path: /tmp/archivo.txt
      loop: "{{ ips_owner}}"
      loop_control:
        loop_var: item
      delegate_to: localhost

    - name: agregar linea al archivo si la Ip es privada
      lineinfile:
       line: "{{ item }}: es una ip privada y es descartada de la lista de ips ingresadas."
       path: /tmp/archivo.txt
      loop: "{{ ips_privadas}}"
      loop_control:
        loop_var: item
      delegate_to: localhost
    

    - name: Lista de IPs publicas
      lineinfile:
       line: "Lista de ip publicas a bloquear"
       path: /tmp/archivo.txt
      delegate_to: localhost

    - name: agregar linea al archivo si la Ip es publica
      lineinfile:
       line: "{{ item }}"
       path: /tmp/archivo.txt
      loop: "{{ ips_blocks}}"
      loop_control:
        loop_var: item
      delegate_to: localhost


    - name: mostrar ips ips_blocks
      debug:
        var: ips_blocks
      delegate_to: localhost

    - name: Leer contenido del archivo
      slurp:
        path: /tmp/archivo.txt
      register: archivo_contenido
      delegate_to: localhost

    - name: Mostrar contenido del archivo
      debug:
        msg: "Contenido del archivo: {{ archivo_contenido.content | b64decode }}"  
      delegate_to: localhost            

    # proceso que llama a platbook qeu agrega las ips en el Checkpoint
    - name: Loop through IPs
      include_tasks: add_ip_to_checkpoint.yml
      register: salida_bloqueo
      loop: "{{ ips_blocks }}"
      loop_control:
        loop_var: ip_item

    - name: Ver resultado bloqueo Checkpoint
      debug:
        var: salida_bloqueo


# Envio de correo electronico
- name: Sending an e-mail using Gmail SMTP servers
  hosts: localhost
  gather_facts: no

  tasks:
    - name: Leer contenido del archivo temporal
      slurp:
        src: /tmp/archivo.txt
      register: file_content

    - name: enviar mail
      community.general.mail:
          host: 192.168.0.42
          port: 25
          sender: 'ansible-no-reply@bcp.gov.py'
          to: rarzamendia@bcp.gov.py,dmorinigo@bcp.gov.py
          subject: Ansible-report
          body: "Bloqueo de IP's       
           {{ file_content['content'] | b64decode }}"


  