---
- name: Verificar si todos los archivos existen de Desarrollo
  hosts: WebDesarrollo
  gather_facts: no
  become: yes
   
  tasks:
    
    - name: Separar la lista de Archivos ingresados en una lista de Python
      ansible.builtin.set_fact:
        files: "{{ files_list.split('\n') | map('trim') }}"
      delegate_to: localhost
             
    - name: Verificar si los archivos existen en el servidor de desarrollo
      ansible.builtin.stat:
        path: "{{ item }}"
      register: stat_result
      loop: "{{ files }}"
    
    - name: Crear lista de archivos existentes
      set_fact:
        existing_files: "{{ stat_result.results | selectattr('stat.exists', 'equalto', True) | map(attribute='item') | list }}"
      delegate_to: localhost

    - name: Guardar la variable en un archivo JSON
      copy:
        content: "{{ existing_files | to_json }}"
        dest: /tmp/variable.json
      delegate_to: localhost

    - name: Mostrar archivos que existen en el host fuente
      debug:
        msg: "Archivo '{{ item }}' existe en el host fuente"
      loop: "{{ existing_files }}"
      delegate_to: localhost

- name: Verificar que los directorios existen y sino crearlos
  hosts: WebProduccion
  gather_facts: no
  become: yes

  tasks:

    - name: Incluir variables desde el archivo JSON
      include_vars:
        file: /tmp/variable.json
        name: existing_files
      delegate_to: localhost

    - name: Separar la ruta del archivo
      set_fact:
        parts: "{{ items | split('/') | list }}"
      loop: "{{ existing_files }}"
      delegate_to: localhost

    - name: Separar la ruta del archivo en el directorio y el nombre del archivo
      set_fact:
        directories_path: "{{ parts[:-1] | join('/') | list }}"
      loop: "{{ existing_files }}"

    - name: Mostrar archivos que existen en el host fuente
      debug:
        msg: "Directorio: '{{ item }}' "
      loop: "{{ existing_files }}"
      delegate_to: localhost

    
        

    