---
- name: Verificar si todos los archivos existen de Desarrollo
  hosts: WebDesarrollo
  gather_facts: no
  become: yes
   
  tasks:
    
    - name: Separar la lista de Archivos ingresados en una lista de Python
      ansible.builtin.set_fact:
        files: "{{ files_list.split('\n') | map('trim') }}"
      delegate_to: localhost
             
    - name: Verificar si los archivos existen en el servidor de desarrollo
      ansible.builtin.stat:
        path: "{{ item }}"
      register: stat_result
      loop: "{{ files }}"
    
    - name: Crear lista de archivos existentes
      set_fact:
        existing_files: "{{ stat_result.results | selectattr('stat.exists', 'equalto', True) | map(attribute='item') | list }}"
      delegate_to: localhost

    - name: Crear archivo de varible
      copy:
        content: |
          existing_files:
          {% for file_path in existing_files %}
            - "{{ file_path }}"
          {% endfor %}
        dest: /tmp/existing_files.yml
      delegate_to: localhost

    #- name: Guardar la variable en un archivo JSON
    #  copy:
    #    content: |
    #      existing_files:
    #        - "{{ existing_files }}"
    #    dest: /tmp/variable.yml
    #  delegate_to: localhost

    - name: Mostrar archivos que existen en el host fuente
      debug:
        msg: "Archivo '{{ item }}' existe en el host fuente"
      loop: "{{ existing_files }}"
      delegate_to: localhost

- name: Realizar backup asíncrono
  hosts: WebProduccion
  gather_facts: yes
  become: yes

  vars:
      directorio_origen: "/home/ansible/Instituto"
      ruta_destino_backup: "/home/ansible"
      nombre_backup: "backup_{{ ansible_date_time.date }}.tar.gz"

  tasks:

    - name: Comprimir directorio en un archivo tar.gz
      archive:
        path: "{{ directorio_origen }}"
        dest: "{{ ruta_destino_backup }}/{{ nombre_backup }}"
        format: gz
      async: 3600
      poll: 0
      register: backup_result
    
    #- name: Iniciar backup asíncrono
    #  command: /path/to/backup_script.sh
    #  async: 3600  # Ejemplo de tiempo de espera en segundos (1 hora)
    #  poll: 0
    #  register: backup_result

    - name: Esperar a que termine el backup
      async_status:
        jid: "{{ backup_result.ansible_job_id }}"
      register: backup_status
      until: backup_status.finished
      retries: 60  # Número de intentos para verificar el estado del backup
      delay: 10    # Intervalo de espera entre intentos

- name: Verificar que los directorios existen y sino crearlos
  hosts: WebProduccion
  gather_facts: no
  become: yes

  vars: 
    directorio_destino: "/home/ansible"

  tasks:

    - name: Leer contenido del archivo
      include_vars: 
        file: /tmp/existing_files.yml
      delegate_to: localhost

    - name: Mostrar contenido del archivo
      debug:
        var: existing_files
      delegate_to: localhost
      
    # en directories_list tengo el listado de todos los directorios
    - name: Separar la ruta del archivo
      set_fact:
        directories_list: "{{ existing_files | map('dirname') | list }}"
      delegate_to: localhost
     
    - name: mostrar listado
      debug:
        var: directories_list
      delegate_to: localhost

    # Chuequear que el directorio exite en produccion y si no exite crearlo

    - name: Verificar existencia de directorios
      stat:
        path: "{{ item }}"
      register: directory_status
      loop: "{{ directories_list }}"

    - name: Crear directorios que no existen
      file:
        path: "{{ item.item }}"
        state: directory
      when: not item.stat.exists
      loop: "{{ directory_status.results }}"

    - name: Copiar archivos a producccion
      shell: scp root@10.54.118.2:{{ item }} {{ item }}
      loop: "{{ existing_files }}"

    # Limpiar cache si es necesario
    
    - name: Verificar si el directorio existe
      ansible.builtin.stat:
        path: "/home/ansible/Instituto/app/console"
      register: directorio_existente

    - name: Realizar tareas si el directorio existe
      when: directorio_existente.stat.exists 
      block:
          - name: Clear cache
            shell: php "{{ directorio_destino }}/app/console" cache:clear --env=prod >> "{{ log }}" 2>&1

          - name: Clear doctrine metadata cache
            shell: php "{{ directorio_destino }}/app/console" doctrine:cache:clear-metadata --env=prod >> "{{ log }}" 2>&1

          - name: Clear doctrine query cache
            shell: php "{{ directorio_destino }}/app/console" doctrine:cache:clear-query --env=prod >> "{{ log }}" 2>&1

          - name: Clear doctrine result cache
            shell: php "{{ directorio_destino }}/app/console" doctrine:cache:clear-result --env=prod >> "{{ log }}" 2>&1

          - name: Cambio dueño y grupo a /var/www/html/V1/instituto/app/cache
            file:
              path: /var/www/html/V1/instituto/app/cache
              owner: apache
              group: apache
              recurse: yes

          - name: Cambio de dueño y grupo a l/var/www/html/V1/instituto/app/logs
            file:
              path: /var/www/html/V1/instituto/app/logs
              owner: apache
              group: apache
              recurse: yes

          - name: Cambio de permisos a /var/www/html/V1/instituto/app/cache
            file:
              path: /var/www/html/V1/instituto/app/cache
              mode: '0775'
              recurse: yes

          - name: Cambio de permisos a /var/www/html/V1/instituto/app/logs
            file:
              path: /var/www/html/V1/instituto/app/logs
              mode: '0775'
              recurse: yes 
      rescue:
        - name: no se limpio el cache
          debug:
            msg: "no se limpio el cache pues no se econtro el directorio /app/console" 
